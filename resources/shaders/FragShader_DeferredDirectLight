#version 430 core
out vec4 FragColor;
in vec2 texCoord;

uniform sampler2D albedo;
uniform sampler2D worldPos;
uniform sampler2D normal;
uniform sampler2D depth;
uniform mat4 world2Screen;
uniform float sceneExtent = 1;

/* lights variants */
const int maxLightCnt = 10;
struct Light{
	vec3 pos; 
	vec3 ambient; 
	vec3 bound[2];
	vec3 emission;
	bool castShadow;
	float farPlane;
	float nearPlane;
	float shadowOffset;
	float mapSize;
	samplerCube shadowMap;
};
struct LightValues{
	vec3 extent;
}lvalues[maxLightCnt];

uniform Light lights[maxLightCnt];
uniform int lightCount;

/* constants */
const float noiseScale = 0.01;
const float PI = 3.14159269;
const int PcfSampleCnt = 6;
const int PcssSampleCnt = 4;
const float PseudoRandomFactor = 0.8;
const float PcssShadowEdgeFadeFactor = 5;
const float FullShadowedBlockerRate = 0.1;
const float lightAreaScale = 1;
const bool outputUnshadowedRate = false;

/* global variants */
vec3 aWorldPos;
vec3 aNormal;
vec3 aAlbedo;
vec4 aFragColor;
float aDepth;

/* noise function */
float random(float x)
{
    float y = fract(sin(x)*100001.0);
    return y;
}
float random(vec3 v3)
{
    return fract(sin(dot(cross(v3, vec3(12.9898,78.233,21.3121)), vec3(-1132.21, 16.353, -1332.23))) * 43758.5453123);
}
vec3 random3(vec3 v3){
    v3 = vec3(dot(v3,vec3(127.1,-311.7,123.7)),
              dot(v3,vec3(269.5,-183.3,812.321)),
			  dot(v3,vec3(251.13,918.13,-772.13)));
    return -1.0 + 2.0*fract(sin(v3)*1375896.453);
}
// Gradient Noise by Inigo Quilez - iq/2013
// https://www.shadertoy.com/view/XdXGW8
float noise(vec3 v3) {
	v3 *= sceneExtent / noiseScale;
    vec3 i = floor(v3);
    vec3 f = fract(v3);

    vec3 u = f*f*(3.0-2.0*f);
																	 
    return mix(mix(mix( dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ),
						dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
				   mix( dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ),
						dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
			   mix(mix( dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ),
						dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
				   mix( dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ),
						dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z);
}
vec3 noise3(vec3 v3) {
	return vec3(noise(v3),noise(v3 + sceneExtent * 12.414),noise(v3 + sceneExtent * 532.1365));
}

vec3 calEmissionIn(int lightIdx, vec3 lightVec, vec3 normLightVec, float receiverDist, int dim){
	vec3 ret = vec3(0);
	float cosi = abs(normLightVec[dim]);
	int j = (dim+1)%3;
	int k = (dim+2)%3;
	float area = (lights[lightIdx].bound[1][j] - lights[lightIdx].bound[0][j])*(lights[lightIdx].bound[1][k] - lights[lightIdx].bound[0][k]);
	return lights[lightIdx].emission * area * cosi / (receiverDist * receiverDist);
}


/*
 *	For shadow map
 */
float calBlockerDist(int lightIdx, vec3 lightVec){
	float dBlocker = texture(lights[lightIdx].shadowMap, lightVec).r;
	return dBlocker * (lights[lightIdx].farPlane - lights[lightIdx].nearPlane) + lights[lightIdx].nearPlane;
}

float calShadowEdgeFadeValue(int lightIdx, vec3 pProjectInLight, int dim1, int dim2){
	float temp = 0;
	float dist1 = min(pProjectInLight[dim1] - lights[lightIdx].bound[0][dim1], lights[lightIdx].bound[1][dim1] - pProjectInLight[dim1]);
	float dist2 = min(pProjectInLight[dim2] - lights[lightIdx].bound[0][dim2], lights[lightIdx].bound[1][dim2] - pProjectInLight[dim2]);
	temp = (dist1 / (lights[lightIdx].bound[1][dim1] - lights[lightIdx].bound[0][dim1]) + dist2 / (lights[lightIdx].bound[1][dim2] - lights[lightIdx].bound[0][dim2])) * PcssShadowEdgeFadeFactor;
	return min(temp, 1.0);
}

float PCSS(int lightIdx, int dim, vec3 lightVec, float receiverDist){
	int d1 = (dim+1)%3;
	int d2 = (dim+2)%3;
	//cal average blocker dist, pass 1
	float avgBlockerDist = 0;
	float blockerCnt = 0;
	vec2 lightExtent = vec2(lvalues[lightIdx].extent[d1],lvalues[lightIdx].extent[d2]) * lightAreaScale;
	//平方采样
	vec2 lightExtentSqrt = sqrt(lightExtent);
	float offset1 = lightExtentSqrt[0] / PcssSampleCnt;
	float offset2 = lightExtentSqrt[1] / PcssSampleCnt;
	//#TODO1 整理代码
	//now don't consider light source with zero area
	if(offset1<=1e-16 || offset2<=1e-16)
		return 0;
	
	for(int i=0;i<PcssSampleCnt;i++){
		float d1offset = offset1 * i - lightExtentSqrt[0] / 2;
		vec3 offset = {0,0,0};
		offset[d1] = d1offset;
		for(int j=0;j<PcssSampleCnt;j++){
			float d2offset = offset2 * j - lightExtentSqrt[1] / 2;
			offset[d2] = d2offset;
			vec3 Vsa = lightVec + offset;

			//pseudo-random
			offset[d1] += (random(Vsa)*0.5*PseudoRandomFactor + 0.5) * offset1;
			offset[d2] += (random(Vsa)*0.5*PseudoRandomFactor + 0.5) * offset2;
			Vsa = lightVec + offset * abs(offset);

			float dBlocker = calBlockerDist(lightIdx, Vsa);
			if(dBlocker < receiverDist - lights[lightIdx].shadowOffset){
				//check blocker indeed block receiver to light
				vec3 pBlocker = lights[lightIdx].pos + normalize(Vsa) * dBlocker;
				//project blocker to light
				vec3 pProjectInLight = aWorldPos + (pBlocker - aWorldPos) *  lightVec[dim] / (aWorldPos[dim] - pBlocker[dim]);
				if(abs(pBlocker[dim]-lights[lightIdx].pos[dim]) < abs(aWorldPos[dim]-lights[lightIdx].pos[dim]) - lights[lightIdx].shadowOffset
				&& pProjectInLight[d1] >= lights[lightIdx].bound[0][d1] && pProjectInLight[d1] <= lights[lightIdx].bound[1][d1]
				&& pProjectInLight[d2] >= lights[lightIdx].bound[0][d2] && pProjectInLight[d2] <= lights[lightIdx].bound[1][d2])
				{
					//fade with distance
					float fadeVal = calShadowEdgeFadeValue(lightIdx, pProjectInLight, d1, d2);
					avgBlockerDist += dBlocker * dBlocker * fadeVal;
					blockerCnt = blockerCnt + 1.0 * fadeVal;
				}
			}
		}
	}
	
	if(blockerCnt==0) return 1;
	if(avgBlockerDist <= 0) return 0;
	avgBlockerDist /= blockerCnt;
	avgBlockerDist = sqrt(avgBlockerDist);

	//PCF
	int discardCnt = 0;
	float ret = 0;
	float wPenumbra1 = (receiverDist - avgBlockerDist) * lightAreaScale * lvalues[lightIdx].extent[d1] / avgBlockerDist;
	float wPenumbra2 = (receiverDist - avgBlockerDist) * lightAreaScale * lvalues[lightIdx].extent[d2] / avgBlockerDist;
	float pcfOffset1 = wPenumbra1 / PcfSampleCnt;
	float pcfOffset2 = wPenumbra2 / PcfSampleCnt;
	for(int i=0;i<PcfSampleCnt;i++){
		float d1offset = pcfOffset1 * i - wPenumbra1/2;
		for(int j=0;j<PcfSampleCnt;j++){
			float d2offset = pcfOffset2 * j - wPenumbra2/2;
			vec3 offset = {0,0,0};
			offset[d1] = d1offset;
			offset[d2] = d2offset;
			vec3 Vsa = lightVec + offset;
			
			//pseudo-random
			offset[d1] += (random(Vsa)*0.5*PseudoRandomFactor + 0.5) * pcfOffset1;
			offset[d2] += (random(Vsa)*0.5*PseudoRandomFactor + 0.5) * pcfOffset2;
			Vsa = lightVec + offset;
			
			float dBlocker = calBlockerDist(lightIdx, Vsa);
			if(dBlocker > receiverDist - lights[lightIdx].shadowOffset){
				//not shadowed
				ret += 1;
			}
			else if(length(offset) > 0){
				//check blocker indeed block receiver to light
				vec3 pBlocker = lights[lightIdx].pos + normalize(Vsa) * dBlocker;
				//project blocker to light
				vec3 pProjectInLight = aWorldPos + (pBlocker - aWorldPos) * (lightVec[dim]) / (aWorldPos[dim] - pBlocker[dim]);
				if(abs(pBlocker[dim]-lights[lightIdx].pos[dim]) < abs(aWorldPos[dim]-lights[lightIdx].pos[dim]) - lights[lightIdx].shadowOffset
				&& pProjectInLight[d1] >= lights[lightIdx].bound[0][d1] && pProjectInLight[d1] <= lights[lightIdx].bound[1][d1]
				&& pProjectInLight[d2] >= lights[lightIdx].bound[0][d2] && pProjectInLight[d2] <= lights[lightIdx].bound[1][d2])
				{
					//fade with distance
					float fadeVal = calShadowEdgeFadeValue(lightIdx, pProjectInLight, d1, d2);
					ret+=1-fadeVal;
				}
				else{
					//ret+=1;
					discardCnt++;
				}
			}
		}
	}
	if(discardCnt == PcfSampleCnt * PcfSampleCnt) return 1;
	ret /= (PcfSampleCnt * PcfSampleCnt - discardCnt);
	//return ret;
	//fade from full lit to penumbra
	return mix(1, ret, min(1.0, blockerCnt * 1.0 / PcssSampleCnt / PcssSampleCnt / FullShadowedBlockerRate));
}

//#TODO 根据prim id buffer来blur shadow map
void main(){
	//prepare global value
	//mtr values
	aWorldPos = texture(worldPos, texCoord).xyz;
	aNormal = texture(normal, texCoord).xyz;
	aAlbedo = texture(albedo, texCoord).xyz;
	aDepth = texture(depth, texCoord).r;

	//calculate direct light
	vec3 totLight;
	for(int i=0;i<lightCount;i++){
		vec3 lightVec = aWorldPos - lights[i].pos;
		vec3 normLightVec = normalize(lightVec);
		float dReceiver = length(lightVec);
		float cosTheta = max(-dot(aNormal,normLightVec),0);
	
		/* pre-calculate some value */
		for(int dim=0;dim<3;dim++){
			lvalues[i].extent[dim] = lights[i].bound[1][dim] - lights[i].bound[0][dim];
		}
	
		/* hard shadow */
		//float dBlocker = texture(lights[i].shadowMap, lightVec).r;
		//dBlocker = dBlocker * (lights[i].farPlane - lights[i].nearPlane) + lights[i].nearPlane;
		//if(dBlocker > dReceiver - lights[i].shadowOffset){
		//	for(int dim=0;dim<3;dim++){
		//		totLight += cosTheta*calEmissionIn(i,lightVec,normLightVec,dReceiver,dim);
		//	}
		//}
		/* PCSS */
		for(int dim=0;dim<3;dim++){
			float unshadowedRate;
			if(cosTheta <= 0)
				unshadowedRate = 0;
			else
				unshadowedRate = PCSS(i, dim, lightVec, dReceiver);
			if(outputUnshadowedRate)
				FragColor += unshadowedRate;
			else
				totLight += cosTheta*unshadowedRate*calEmissionIn(i,lightVec,normLightVec,dReceiver,dim);
		}
	} 

	if(!outputUnshadowedRate)
		FragColor += (vec4(aAlbedo*totLight,1.0)); 
	if(outputUnshadowedRate){
		FragColor /= lightCount;
	}
}