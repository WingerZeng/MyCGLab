#version 430 core			   
																												   
layout(triangles) in;																					   
layout(triangle_strip, max_vertices = 3) out;															   
out vec3 aNormal;
in vec3 normal[];
in vec3 worldPos[];								
out vec3 aWorldPos;
uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform bool hasNormal = false;
uniform mat4 modelViewMatInv;

void main()																						
{	
	mat4 transform = transpose(inverse(viewMat));
	vec4 viewPoint0 = viewMat * vec4(worldPos[0], 1);
	if(!hasNormal){
		vec3 edge1 = worldPos[1]-worldPos[0];
		vec3 edge2 = worldPos[2]-worldPos[0];
		aNormal = normalize(cross(edge1,edge2));
		vec4 viewNormal = transform * vec4(aNormal, 0.0);
		//透视投影下，双面光照的实现方法，计算三角形与相机构成的四面体的体积正负
		if(dot(viewNormal.xyz, viewPoint0.xyz) > 0)
			aNormal = -aNormal;  //双面光照
	}
																								   
	gl_Position = gl_in[0].gl_Position;
	aWorldPos = worldPos[0];	
	if(hasNormal){
		aNormal = normal[0];
		//调整法向指向摄像机
		vec4 viewNormal = transform * vec4(aNormal, 0.0);
		if(dot(viewNormal.xyz, viewPoint0.xyz) > 0)
			aNormal = -aNormal;
	}
	EmitVertex();

	gl_Position = gl_in[1].gl_Position;
	aWorldPos = worldPos[1];	
	if(hasNormal){
		aNormal = normal[1];	
		//调整法向指向摄像机
		vec4 viewNormal = transform * vec4(aNormal, 0.0);
		if(dot(viewNormal.xyz, viewPoint0.xyz) > 0)
			aNormal = -aNormal;							   
	}
	EmitVertex();		

	gl_Position = gl_in[2].gl_Position;
	aWorldPos = worldPos[2];	
	if(hasNormal){
		aNormal = normal[2];	
		//调整法向指向摄像机
		vec4 viewNormal = transform * vec4(aNormal, 0.0);
		if(dot(viewNormal.xyz, viewPoint0.xyz) > 0)
			aNormal = -aNormal;							   
	}							   
	EmitVertex();	

	EndPrimitive();										
}