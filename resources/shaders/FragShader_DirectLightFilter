#version 430 core
out vec4 FragColor;
noperspective in vec2 texCoord;

//uniform textures
uniform sampler2D gLightImage;
uniform sampler2D gAlbedo;
uniform sampler2D gPrimId;

// Gaussin Kernel
const int BlurSampleCnt = 25;
const vec2 BlurOffset[BlurSampleCnt] = {
	{-2, 2},{-1, 2},{0, 2},{1, 2},{2, 2},
	{-2, 1},{-1, 1},{0, 1},{1, 1},{2, 1},
	{-2, 0},{-1, 0},{0, 0},{1, 0},{2, 0},
	{-2,-1},{-1,-1},{0,-1},{1,-1},{2,-1},
	{-2,-2},{-1,-2},{0,-2},{1,-2},{2,-2},
};
const float BlurWeights[BlurSampleCnt] = {
	36, 90, 120, 90, 36,
	90, 225,300, 225,90,
	120,300,400, 300,120,
	90, 225,300, 225,90,
	36, 90, 120, 90, 36,
};

void main(){
	FragColor = vec4(0,0,0,1);
	vec2 texSize = 1/vec2(textureSize(gLightImage,0));
	float weightSum = 0;
	vec3 id = texture(gPrimId,texCoord).xyz;
	for(int i=0;i<BlurSampleCnt;i++){
		vec2 sampleCoord = texCoord + BlurOffset[i]*texSize;
		vec3 sampleId = texture(gPrimId,sampleCoord).xyz;
		if(sampleId == id)
		{
			FragColor += texture(gLightImage,sampleCoord)*BlurWeights[i];
			weightSum += BlurWeights[i];
		}
	}
	FragColor /= weightSum;
	FragColor *= texture(gAlbedo, texCoord);
}