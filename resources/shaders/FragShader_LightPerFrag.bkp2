#version 430 core
uniform vec4 ourColor;
uniform vec4 Le;
out vec4 FragColor;
in vec3 aNormal;
in vec3 geoNormal;
in vec3 aWorldPos;
uniform bool selected = false;
uniform vec3 selectedColor;
struct Light{
vec3 pos; 
vec3 ambient; 
vec3 bound[2];
vec3 emission;
bool castShadow;
float farPlane;
float nearPlane;
float shadowOffset;
float mapSize;
samplerCube shadowMap;
};
uniform Light lights[10];
uniform int lightCount;
const int PcfSampleCnt = 6;
const int PcssSampleCnt = 4;
const float PseudoRandomFactor = 0.3;
const int PerlinPTable[65] = {59,25,32,4,51,54,28,62,38,8,52,26,22,47,0,49,2,30,63,20,50,58,44,1,17,7,35,31,61,55,39,53,33,18,5,19,11,48,24,56,46,15,43,29,27,12,6,45,37,57,9,10,13,60,41,16,64,23,40,34,3,36,21,42,14};

vec3 calEmissionIn(int lightIdx, vec3 lightVec, vec3 normLightVec, float receiverDist, int dim){
	vec3 ret = vec3(0);
	float cosi = abs(normLightVec[dim]);
	int j = (dim+1)%3;
	int k = (dim+2)%3;
	float area = (lights[lightIdx].bound[1][j] - lights[lightIdx].bound[0][j])*(lights[lightIdx].bound[1][k] - lights[lightIdx].bound[0][k]);
	return lights[lightIdx].emission * area * cosi / (receiverDist * receiverDist);
}

float myRand(float val){
	int intval = int(val * 1e5);
	return PerlinPTable[intval%65] * 1.0 / 64;
}

float PCSS(int lightIdx, int dim, vec3 lightVec, float receiverDist){
	int d1 = (dim+1)%3;
	int d2 = (dim+2)%3;
	//cal average blocker dist
	float avgBlockerDist = 0;
	float blockerCnt = 0;
	const float lightAreaScale = 1;
	float offset1 = (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) * lightAreaScale / PcssSampleCnt;
	float offset2 = (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) * lightAreaScale / PcssSampleCnt;
	//#TEST
	int cnt = 0;
	//now don't consider light source with zero area
	if(offset1<=1e-10 || offset2<=1e-10)
		return 0;
	for(int i=0;i<PcssSampleCnt;i++){
		float d1offset = offset1 * i - (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1])/2;

		for(int j=0;j<PcssSampleCnt;j++){
			float d2offset = offset2 * j - (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2])/2;
			vec3 offset = {0,0,0};
			offset[d1] = d1offset;
			offset[d2] = d2offset;
			vec3 Vsa = lightVec + offset;

			//pseudo-random
			offset[d1] += ((myRand(Vsa[d1])-0.5)*PseudoRandomFactor + 0.5) * offset1;
			offset[d2] += ((myRand(Vsa[d2])-0.5)*PseudoRandomFactor + 0.5) * offset2;
			Vsa = lightVec + offset;

			float dBlocker = texture(lights[lightIdx].shadowMap, Vsa).r;
			dBlocker = dBlocker * (lights[lightIdx].farPlane - lights[lightIdx].nearPlane) + lights[lightIdx].nearPlane;
			if(dBlocker < receiverDist - lights[lightIdx].shadowOffset){
				//check blocker indeed block receiver to light
				vec3 pBlocker = lights[lightIdx].pos + normalize(Vsa) * dBlocker;
				//project blocker to light
				vec3 pProjectInLight = aWorldPos + (pBlocker - aWorldPos) * (aWorldPos[dim] - lights[lightIdx].pos[dim]) / (aWorldPos[dim] - pBlocker[dim]);
				if(abs(aWorldPos[dim] - pBlocker[dim]) > 1e-6 && pProjectInLight[d1] >= lights[lightIdx].bound[0][d1] && pProjectInLight[d1] <= lights[lightIdx].bound[1][d1]
				&& pProjectInLight[d2] >= lights[lightIdx].bound[0][d2] && pProjectInLight[d2] <= lights[lightIdx].bound[1][d2])
				{
					avgBlockerDist+=dBlocker * dBlocker;
					blockerCnt = blockerCnt + 1;
				}
				else{
					//fade with distance
					float temp = 0;
					if(pProjectInLight[d1] < lights[lightIdx].bound[0][d1]){
						temp+=(lights[lightIdx].bound[0][d1] - pProjectInLight[d1]) / (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) / 3;
					}
					if(pProjectInLight[d1] > lights[lightIdx].bound[1][d1]){
						temp+=-(lights[lightIdx].bound[1][d1] - pProjectInLight[d1]) / (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) / 3;
					}
					if(pProjectInLight[d2] < lights[lightIdx].bound[0][d2]){
						temp+=(lights[lightIdx].bound[0][d2] - pProjectInLight[d2]) / (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) / 3;
					}
					if(pProjectInLight[d2] > lights[lightIdx].bound[1][d2]){
						temp+=-(lights[lightIdx].bound[1][d2] - pProjectInLight[d2]) / (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) / 3;
					}
					avgBlockerDist += dBlocker * dBlocker * max(1.0-temp, 0.0);
					blockerCnt = blockerCnt + 1.0 * max(1.0-temp, 0.0);
				}
			}
		}
	}

	if(blockerCnt==0) return 1;
	avgBlockerDist /= blockerCnt;
	avgBlockerDist = sqrt(avgBlockerDist);

	//PCF
	float ret = 0;
	float wPenumbra1 = (receiverDist - avgBlockerDist) * (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) / avgBlockerDist;
	float wPenumbra2 = (receiverDist - avgBlockerDist) * (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) / avgBlockerDist;
	float pcfOffset1 = wPenumbra1 / PcfSampleCnt;
	float pcfOffset2 = wPenumbra2 / PcfSampleCnt;
	for(int i=0;i<PcfSampleCnt;i++){
		float d1offset = pcfOffset1 * i - wPenumbra1/2;
		for(int j=0;j<PcfSampleCnt;j++){
			float d2offset = pcfOffset2 * j - wPenumbra2/2;
			vec3 offset = {0,0,0};
			offset[d1] = d1offset;
			offset[d2] = d2offset;
			vec3 Vsa = lightVec + offset;
			
			//pseudo-random
			offset[d1] += ((myRand(Vsa[d1])-0.5)*PseudoRandomFactor + 0.5) * offset1;
			offset[d2] += ((myRand(Vsa[d2])-0.5)*PseudoRandomFactor + 0.5) * offset2;
			Vsa = lightVec + offset;

			float dBlocker = texture(lights[lightIdx].shadowMap, Vsa).r;
			dBlocker = dBlocker * (lights[lightIdx].farPlane - lights[lightIdx].nearPlane) + lights[lightIdx].nearPlane;
			if(dBlocker > receiverDist - lights[lightIdx].shadowOffset){
				//not shadowed
				ret += 1;
			}
			else if(length(offset) > 0){
				//check blocker indeed block receiver to light
				vec3 pBlocker = lights[lightIdx].pos + normalize(Vsa) * dBlocker;
				//project blocker to light
				vec3 pProjectInLight = aWorldPos + (pBlocker - aWorldPos) * (aWorldPos[dim] - lights[lightIdx].pos[dim]) / (aWorldPos[dim] - pBlocker[dim]);
				//fade with distance
				float temp = 0;
				if(pProjectInLight[d1] < lights[lightIdx].bound[0][d1]){
					temp+=(lights[lightIdx].bound[0][d1] - pProjectInLight[d1]) / (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) / 1;
				}
				if(pProjectInLight[d1] > lights[lightIdx].bound[1][d1]){
					temp+=-(lights[lightIdx].bound[1][d1] - pProjectInLight[d1]) / (lights[lightIdx].bound[1][d1] - lights[lightIdx].bound[0][d1]) / 1;
				}
				if(pProjectInLight[d2] < lights[lightIdx].bound[0][d2]){
					temp+=(lights[lightIdx].bound[0][d2] - pProjectInLight[d2]) / (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) / 1;
				}
				if(pProjectInLight[d2] > lights[lightIdx].bound[1][d2]){
					temp+=-(lights[lightIdx].bound[1][d2] - pProjectInLight[d2]) / (lights[lightIdx].bound[1][d2] - lights[lightIdx].bound[0][d2]) / 1;
				}
				ret += min(temp, 1.0);
			}
		}
	}
	ret /= PcfSampleCnt * PcfSampleCnt;
	return ret;
}

const bool outputUnshadowedRate = false;

void main(){
	if(selected){
		FragColor = vec4(selectedColor,1);
		return;
	}
	if(!outputUnshadowedRate){
		FragColor += Le;
	}
	
	for(int i=0;i<lightCount;i++){
		vec3 lightVec = aWorldPos - lights[i].pos;
		vec3 normLightVec = normalize(lightVec);
		float dReceiver = length(lightVec);
		float brdf = max(-dot(aNormal,normLightVec),0);
		vec3 totLight = lights[i].ambient;
		/* hard shadow */
		//float dBlocker = texture(lights[i].shadowMap, lightVec).r;
		//dBlocker = dBlocker * (lights[i].farPlane - lights[i].nearPlane) + lights[i].nearPlane;
		//if(dBlocker > dReceiver - lights[i].shadowOffset){
		//	for(int dim=0;dim<3;dim++){
		//		totLight += brdf*calEmissionIn(i,lightVec,normLightVec,dReceiver,dim);
		//	}
		//}
		/* PCSS */
		for(int dim=0;dim<3;dim++){
			float unshadowedRate;
			if(brdf <= 0)
				unshadowedRate = 0;
			else
				unshadowedRate = PCSS(i, dim, lightVec, dReceiver);
			if(outputUnshadowedRate)
				FragColor += unshadowedRate;
			else
				totLight += brdf*unshadowedRate*calEmissionIn(i,lightVec,normLightVec,dReceiver,dim);
		}
		if(!outputUnshadowedRate)
			FragColor += ourColor*(vec4(totLight,1.0)); 
	} 
	if(outputUnshadowedRate){
		FragColor /= lightCount;
	}
}